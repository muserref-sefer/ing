{
  "version": 3,
  "sources": ["../../pwa-helpers/src/connect-mixin.ts", "../../pwa-helpers/src/lazy-reducer-enhancer.ts", "../../pwa-helpers/src/media-query.ts", "../../pwa-helpers/src/metadata.ts", "../../pwa-helpers/src/network.ts", "../../pwa-helpers/src/router.ts"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { Store, Unsubscribe } from 'redux';\n\ntype Constructor<T> = new(...args: any[]) => T;\n\n/**\n  By using this `CustomElement` interface instead of `HTMLElement`, we avoid\n  having the generated typings include most DOM API already provided by\n  TypeScript. This is particularly useful since different versions of\n  TypeScript may have different DOM API typings (e.g. TS 3.0.3 and TS 3.1.1).\n  The required `isConnected` property is included to avoid the following\n  TypeScript error:\n\n      Type 'HTMLElement' has no properties in common with type 'CustomElement'.\n*/\ninterface CustomElement {\n  connectedCallback?(): void;\n  disconnectedCallback?(): void;\n  readonly isConnected: boolean;\n}\n\n/**\n  This is a JavaScript mixin that you can use to connect a Custom Element base\n  class to a Redux store. The `stateChanged(state)` method will be called when\n  the state is updated.\n\n  Example:\n\n      import { connect } from 'pwa-helpers/connect-mixin.js';\n\n      class MyElement extends connect(store)(HTMLElement) {\n        stateChanged(state) {\n          this.textContent = state.data.count.toString();\n        }\n      }\n*/\nexport const connect =\n  <S>(store: Store<S>) =>\n  <T extends Constructor<CustomElement>>(baseElement: T) =>\n  class extends baseElement {\n    _storeUnsubscribe!: Unsubscribe;\n\n    connectedCallback() {\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n\n      this._storeUnsubscribe = store.subscribe(() => this.stateChanged(store.getState()));\n      this.stateChanged(store.getState());\n    }\n\n    disconnectedCallback() {\n      this._storeUnsubscribe();\n\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n    }\n\n    /**\n     * The `stateChanged(state)` method will be called when the state is updated.\n     */\n    stateChanged(_state: S) {}\n  };\n", "/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ReducersMapObject, StoreEnhancer } from 'redux'\n\nexport interface LazyStore {\n  addReducers: (newReducers: ReducersMapObject) => void\n}\n\n/**\n  A Redux store enhancer that lets you lazy-install reducers after the store\n  has booted up. Use this if your application lazy-loads routes that are connected\n  to a Redux store.\n\n  Example:\n\n      import { combineReducers } from 'redux';\n      import { lazyReducerEnhancer } from 'pwa-helpers/lazy-reducer-enhancer.js';\n      import someReducer from './reducers/someReducer.js';\n\n      export const store = createStore(\n        (state, action) => state,\n        compose(lazyReducerEnhancer(combineReducers))\n      );\n\n  Then, in your page/element, you can lazy load a specific reducer with:\n\n      store.addReducers({\n        someReducer\n      });\n*/\nexport const lazyReducerEnhancer =\n  (combineReducers: typeof import('redux').combineReducers) => {\n    const enhancer: StoreEnhancer<LazyStore> = (nextCreator) => {\n      return (origReducer, preloadedState) => {\n        let lazyReducers = {};\n        const nextStore = nextCreator(origReducer, preloadedState);\n        return {\n          ...nextStore,\n          addReducers(newReducers) {\n            const combinedReducerMap: ReducersMapObject = {\n              ...lazyReducers,\n              ...newReducers\n            };\n\n            this.replaceReducer(combineReducers(lazyReducers = combinedReducerMap));\n          }\n        }\n      }\n    }\n\n    return enhancer;\n  };\n", "/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n  Utility method that calls a callback whenever a media-query matches in response\n  to the viewport size changing. The callback should take a boolean parameter\n  (with `true` meaning the media query is matched).\n\n  Example:\n\n      import { installMediaQueryWatcher } from 'pwa-helpers/media-query.js';\n\n      installMediaQueryWatcher(`(min-width: 600px)`, (matches) => {\n        console.log(matches ? 'wide screen' : 'narrow sreen');\n      });\n*/\nexport const installMediaQueryWatcher = (mediaQuery: string, layoutChangedCallback: (mediaQueryMatches: boolean) => void) => {\n  let mql = window.matchMedia(mediaQuery);\n  mql.addListener((e) => layoutChangedCallback(e.matches));\n  layoutChangedCallback(mql.matches);\n};\n", "/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n  Utility method that updates the page's open graph and Twitter card metadata.\n  It takes an object as a parameter with the following properties:\n  title | description | url | image.\n\n  If the `url` is not specified, `window.location.href` will be used; for\n  all other properties, if they aren't specified, then that metadata field will not\n  be set.\n\n  Example (in your top level element or document, or in the router callback):\n\n      import { updateMetadata } from 'pwa-helpers/metadata.js';\n\n      updateMetadata({\n        title: 'My App - view 1',\n        description: 'This is my sample app',\n        url: window.location.href,\n        image: '/assets/view1-hero.png'\n      });\n\n*/\nexport const updateMetadata = ({\n  title,\n  description,\n  url,\n  image,\n  imageAlt\n}: {\n  title?: string,\n  description?: string,\n  url?: string,\n  image?: string,\n  imageAlt?: string\n}) => {\n  if (title) {\n    document.title = title;\n    setMetaTag('property', 'og:title', title);\n  }\n\n  if (description) {\n    setMetaTag('name', 'description', description);\n    setMetaTag('property', 'og:description', description);\n  }\n\n  if (image) {\n    setMetaTag('property', 'og:image', image);\n  }\n\n  if (imageAlt) {\n    setMetaTag('property', 'og:image:alt', imageAlt);\n  }\n\n  url = url || window.location.href;\n  setMetaTag('property', 'og:url', url);\n}\n\n/**\n  Utility method to create or update the content of a meta tag based on an\n  attribute name/value pair.\n\n  Example (in your top level element or document, or in the router callback):\n\n      import { setMetaTag } from 'pwa-helpers/metadata.js';\n\n      setMetaTag('name', 'twitter:card', 'summary');\n      \n  This would create the following meta tag in the head of the document (or\n  update the content attribute if a meta tag with name=\"twitter:card\" exists):\n\n      <meta name=\"twitter:card\" content=\"summary\">\n\n*/\nexport function setMetaTag(attrName:string, attrValue:string, content:string) {\n  let element = document.head!.querySelector(`meta[${attrName}=\"${attrValue}\"]`);\n  if (!element) {\n    element = document.createElement('meta');\n    element.setAttribute(attrName, attrValue);\n    document.head!.appendChild(element);\n  }\n  element.setAttribute('content', content || '');\n}\n", "/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n  Utility method that calls a callback whenever the network connectivity of the app changes.\n  The callback should take a boolean parameter (with `true` meaning\n  the network is offline, and `false` meaning online)\n\n  Example:\n\n      import { installOfflineWatcher } from 'pwa-helpers/network.js';\n\n      installOfflineWatcher((offline) => {\n        console.log('You are ' + offline ? ' offline' : 'online');\n      });\n*/\nexport const installOfflineWatcher = (offlineUpdatedCallback: (isOffline: boolean) => void) => {\n  window.addEventListener('online', () => offlineUpdatedCallback(false));\n  window.addEventListener('offline', () => offlineUpdatedCallback(true));\n\n  offlineUpdatedCallback(navigator.onLine === false);\n};\n", "/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n  Basic router that calls a callback whenever the location is updated.\n\n  Example:\n\n      import { installRouter } from 'pwa-helpers/router.js';\n\n      installRouter((location) => handleNavigation(location));\n\n  For example, if you're using this router in a Redux-connected component,\n  you could dispatch an action in the callback:\n\n      import { installRouter } from 'pwa-helpers/router.js';\n      import { navigate } from '../actions/app.js';\n\n      installRouter((location) => store.dispatch(navigate(location)))\n\n  If you need to force a navigation to a new location programmatically, you can\n  do so by pushing a new state using the History API, and then manually\n  calling the callback with the new location:\n\n      window.history.pushState({}, '', '/new-route');\n      handleNavigation(window.location);\n\n  Optionally, you can use the second argument to read the event that caused the\n  navigation. For example, you may want to scroll to top only after a link click.\n\n      installRouter((location, event) => {\n        // Only scroll to top on link clicks, not popstate events.\n        if (event && event.type === 'click') {\n          window.scrollTo(0, 0);\n        }\n        handleNavigation(location);\n      });\n*/\nexport const installRouter = (locationUpdatedCallback: (location:Location, event: Event|null) => void) => {\n  document.body.addEventListener('click', e => {\n    if (e.defaultPrevented || e.button !== 0 ||\n        e.metaKey || e.ctrlKey || e.shiftKey) return;\n\n    const anchor = e.composedPath().filter(\n      n => (n as HTMLElement).tagName === 'A'\n    )[0] as HTMLAnchorElement | undefined;\n    if (!anchor || anchor.target ||\n        anchor.hasAttribute('download') ||\n        anchor.getAttribute('rel') === 'external') return;\n\n    const href = anchor.href;\n    if (!href || href.indexOf('mailto:') !== -1) return;\n\n    const location = window.location;\n    const origin = location.origin || location.protocol + '//' + location.host;\n    if (href.indexOf(origin) !== 0) return;\n\n    e.preventDefault();\n    if (href !== location.href) {\n      window.history.pushState({}, '', href);\n      locationUpdatedCallback(location, e);\n    }\n  });\n\n  window.addEventListener('popstate', e => locationUpdatedCallback(window.location, e));\n  locationUpdatedCallback(window.location, null /* event */);\n};\n"],
  "mappings": "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",
  "names": []
}
